name: Helm Chart CI/CD

on:
  push:
    branches:
    - main
    - staging
    tags:
    - 'v*'
  workflow_dispatch:

env:
  REGISTRY: harbor.lag0.com.br # Change this to your OCI registry
  CHART_NAME: headplane

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.3

    - name: Install yq
      run: |
        echo "=== Installing yq ==="
        wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        chmod +x /usr/local/bin/yq
        echo "✓ yq installed successfully "

    - name: Install k3s
      run: |
        echo "=== Installing k3s ==="
        curl -sfL https://get.k3s.io | sh -
        sudo chmod 644 /etc/rancher/k3s/k3s.yaml
        mkdir -p ~/.kube
        sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
        sudo chown $USER:$USER ~/.kube/config
        export KUBECONFIG=~/.kube/config
        echo "✓ k3s installed successfully"

    - name: Wait for k3s to be ready
      run: |
        echo "=== Waiting for k3s to be ready ==="
        timeout 60s bash -c 'until kubectl get nodes; do sleep 2; done'
        echo "✓ k3s is ready"

    - name: Create test directories
      run: |
        echo "=== Creating test directories ==="
        mkdir -p test/output test/logs
        echo "✓ Test directories created successfully"

    - name: Update Helm dependencies
      run: |
        if [ ! "$(ls -A charts)" ]; then
          echo "=== Updating Helm dependencies ==="
          helm dependency update .
          echo "✓ Helm dependencies updated successfully"
        else
          echo "=== Using existing dependencies ==="
          echo "✓ Using existing dependencies"
        fi

    - name: Generate templates
      id: generate
      run: |
        for test_file in test/test-cases/*.yaml; do
          test_name=$(basename "$test_file" .yaml)
          echo "=== Generating template for: $test_name ==="
          helm template rybbit . -f "$test_file" > "test/output/${test_name}-output.yaml"
          echo "✓ Template generated successfully for $test_name"
        done

    - name: Validate YAML syntax
      run: |
        for test_file in test/test-cases/*.yaml; do
          test_name=$(basename "$test_file" .yaml)
          echo "=== Validating YAML for: $test_name ==="
          if ! yq eval '.' "test/output/${test_name}-output.yaml" > /dev/null 2>&1; then
            echo "Invalid YAML syntax in ${test_name}-output.yaml"
            yq eval '.' "test/output/${test_name}-output.yaml"
            exit 1
          fi
          echo "✓ YAML syntax validated successfully for $test_name"
        done

    - name: Check for unrendered templates
      run: |
        for test_file in test/test-cases/*.yaml; do
          test_name=$(basename "$test_file" .yaml)
          echo "=== Checking for unrendered templates in: $test_name ==="
          if grep -q "{{.*}}" "test/output/${test_name}-output.yaml"; then
            echo "Found unrendered template variables in ${test_name}-output.yaml"
            cat "test/output/${test_name}-output.yaml"
            exit 1
          fi
          echo "✓ No unrendered templates found in $test_name"
        done

    - name: Validate Kubernetes resources
      run: |
        for test_file in test/test-cases/*.yaml; do
          test_name=$(basename "$test_file" .yaml)
          echo "=== Validating Kubernetes resources for: $test_name ==="
          
          # Check if the test file contains ServiceMonitor resources
          if grep -q "kind: ServiceMonitor" "test/output/${test_name}-output.yaml"; then
            # Check if Prometheus Operator CRDs are installed
            if ! kubectl get crd servicemonitors.monitoring.coreos.com >/dev/null 2>&1; then
              echo "Skipping ServiceMonitor validation as Prometheus Operator CRDs are not installed"
              # Remove ServiceMonitor resources temporarily for validation
              yq eval 'select(.kind != "ServiceMonitor")' "test/output/${test_name}-output.yaml" > "test/output/${test_name}-output-temp.yaml"
              # Validate remaining resources
              if [ -s "test/output/${test_name}-output-temp.yaml" ]; then
                kubectl apply --dry-run=client -f "test/output/${test_name}-output-temp.yaml"
              else
                echo "No resources to validate after removing ServiceMonitor resources"
              fi
              rm "test/output/${test_name}-output-temp.yaml"
            else
              kubectl apply --dry-run=client -f "test/output/${test_name}-output.yaml"
            fi
          else
            kubectl apply --dry-run=client -f "test/output/${test_name}-output.yaml"
          fi
          echo "✓ Kubernetes resources validated successfully for $test_name"
        done

    - name: Check required resources
      run: |
        for test_file in test/test-cases/*.yaml; do
          test_name=$(basename "$test_file" .yaml)
          echo "=== Checking required resources for: $test_name ==="
          if ! grep -q "kind: Deployment\|kind: Service\|kind: ConfigMap\|kind: Secret" "test/output/${test_name}-output.yaml"; then
            echo "Missing required Kubernetes resources in ${test_name}-output.yaml"
            exit 1
          fi
          echo "✓ Required resources found in $test_name"
        done

    - name: Deploy and test resources
      run: |
        for test_file in test/test-cases/*.yaml; do
          test_name=$(basename "$test_file" .yaml)
          namespace="test-${test_name}-$(date +%m%d%H%M)"
          namespace=$(echo "$namespace" | tr '[:upper:]' '[:lower:]' | tr '_' '-' | cut -c 1-63 | sed 's/-$//')
          
          echo "=== Testing $test_name in namespace: $namespace ==="
          kubectl create namespace "$namespace"
          
          # Apply resources
          helm template rybbit . -f "$test_file" --namespace "$namespace" | kubectl apply -f - -n "$namespace"
          
          # Wait for resources to be ready
          echo "Waiting for resources to be ready..."
          kubectl wait --for=condition=available --timeout=40s deployment --all -n "$namespace" 2>/dev/null || true
          kubectl wait --for=condition=complete --timeout=40s job --all -n "$namespace" 2>/dev/null || true
          
          # Quick status check
          echo "Final status:"
          kubectl get deployments,jobs,pods -n "$namespace" -o wide
          
          # Cleanup
          kubectl delete namespace "$namespace" --force --grace-period=0
          echo "✓ Test completed for $test_name"
        done

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: set version
      run: |
        ref=${GITHUB_REF##*/}
        echo "VERSION=${ref#v}" >> $GITHUB_ENV
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.3

    - name: Login to OCI Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - name: Print env.VERSION
      run: |
        echo "env.VERSION: ${{ env.VERSION }}"
    - name: Package and Push Helm Chart
      run: |
        echo "=== Updating dependencies ==="
        helm dependency update .
        echo "✓ Dependencies updated successfully"

        echo "=== Packaging chart ==="
        helm package --version ${{ env.VERSION }} .
        echo "✓ Chart packaged successfully"

        echo "=== Pushing to OCI registry ===" 
        helm push headplane-*.tgz oci://${{ env.REGISTRY }}/library
