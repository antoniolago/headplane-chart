apiVersion: batch/v1
kind: Job
metadata:
  name: headscale-generate-token
  namespace: {{ .Release.Namespace }}
spec:
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: headscale-token
      containers:
        - name: headscale-generate-token
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e
              
              echo "Waiting for headscale container to be Ready..."
              while [ -z "$CONTAINER_STATUS" ]; do
              CONTAINER_STATUS=$(kubectl get pod headplane-0 -n {{ .Release.Namespace }} -o=jsonpath="{.status.containerStatuses[?(@.name==\"headscale\")].state.running}")
                sleep 1
              done

              echo "Generating Headscale API token..."
              TOKEN=$(kubectl -n {{ .Release.Namespace }} exec -i headplane-0 -c headscale -- headscale apikeys create -e 100y)

              if [ -z "$TOKEN" ]; then
                echo "Failed to retrieve API token"
                exit 1
              fi

              echo "Updating headplane-config secret with generated API token..."
              
              # Get the current config from the secret
              CURRENT_CONFIG=$(kubectl get secret headplane-config -n {{ .Release.Namespace }} -o jsonpath='{.data.config\.yaml}' | base64 -d)
              
              # Replace the placeholder API key with the real one
              UPDATED_CONFIG=$(echo "$CURRENT_CONFIG" | sed "s/headscale_api_key: \"hcap_placeholder_key_for_validation_only_12345678901234567890123456789012\"/headscale_api_key: \"$TOKEN\"/")
              
              # Update the secret with the new config
              echo "$UPDATED_CONFIG" | kubectl create secret generic headplane-config --from-file=config.yaml=/dev/stdin -n {{ .Release.Namespace }} --dry-run=client -o yaml | kubectl apply -f -
              
              echo "Successfully updated headplane-config secret with real API token"
