apiVersion: batch/v1
kind: Job
metadata:
  name: headscale-generate-token
  namespace: {{ .Release.Namespace }}
spec:
  backoffLimit: 5
  ttlSecondsAfterFinished: 300
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: headscale-token
      containers:
        - name: headscale-generate-token
          image: bitnami/kubectl:latest
          command:
            - /bin/sh
            - -c
            - |
              set -e
              
              echo "Waiting for Headscale to be ready..."
              # Wait for headplane pod to be created and ready
              kubectl wait --for=condition=ready pod/headplane-0 -n {{ .Release.Namespace }} --timeout=600s
              
              # Additional wait for Headscale service to be fully initialized
              echo "Waiting for Headscale service to be fully ready..."
              sleep 15
              
              # Test if headscale is responding
              max_attempts=30
              attempt=0
              while [ $attempt -lt $max_attempts ]; do
                if kubectl exec headplane-0 -c headscale -n {{ .Release.Namespace }} -- headscale apikeys list >/dev/null 2>&1; then
                  echo "Headscale is responding to API calls"
                  break
                fi
                echo "Headscale not ready yet, waiting... (attempt $((attempt + 1))/$max_attempts)"
                attempt=$((attempt + 1))
                sleep 10
              done
              
              if [ $attempt -eq $max_attempts ]; then
                echo "ERROR: Headscale failed to become ready after $max_attempts attempts"
                exit 1
              fi
              
              echo "Creating Headscale API key..."
              TOKEN=$(kubectl exec headplane-0 -c headscale -n {{ .Release.Namespace }} -- headscale apikeys create -e 100y)
              echo "Generated API token: $TOKEN"
              
              echo "Updating secrets with real API token..."
              
              # Update the headscale-api-token secret
              kubectl patch secret headscale-api-token -n {{ .Release.Namespace }} --type='merge' -p="{\"stringData\":{\"HEADPLANE_OIDC__HEADSCALE_API_KEY\":\"$TOKEN\"}}"
              
              # Get the current headplane-config and update it
              kubectl get secret headplane-config -n {{ .Release.Namespace }} -o yaml > /tmp/headplane-config.yaml
              
              # Replace placeholder with actual token in the config
              sed -i "s/headscale_api_key: \"placeholder\"/headscale_api_key: \"$TOKEN\"/g" /tmp/headplane-config.yaml
              
              # Apply the updated config
              kubectl apply -f /tmp/headplane-config.yaml
              
              rm -f /tmp/headplane-config.yaml
              
              echo "Restarting Headplane to pick up new API token..."
              kubectl rollout restart statefulset/headplane -n {{ .Release.Namespace }}
              kubectl rollout status statefulset/headplane -n {{ .Release.Namespace }} --timeout=300s
              
              echo "Configuration updated successfully with real API token"
