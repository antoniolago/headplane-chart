---
apiVersion: v1
kind: Service
metadata:
  name: mock-oidc-server
spec:
  selector:
    app: mock-oidc-server
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-oidc-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mock-oidc-server
  template:
    metadata:
      labels:
        app: mock-oidc-server
    spec:
      containers:
      - name: mock-oidc-server
        image: python:3.9-alpine
        ports:
        - containerPort: 8080
        command:
        - python
        - -c
        - |
          from http.server import HTTPServer, BaseHTTPRequestHandler
          import json
          
          class MockOIDCHandler(BaseHTTPRequestHandler):
              def do_GET(self):
                  self.send_response(200)
                  self.send_header('Content-type', 'application/json')
                  self.end_headers()
                  
                  if self.path == '/.well-known/openid-configuration':
                      response = {
                          "issuer": "https://auth.test.example.com",
                          "authorization_endpoint": "https://auth.test.example.com/oauth/authorize",
                          "token_endpoint": "https://auth.test.example.com/oauth/token",
                          "userinfo_endpoint": "https://auth.test.example.com/userinfo",
                          "jwks_uri": "https://auth.test.example.com/.well-known/jwks.json",
                          "response_types_supported": ["code", "token", "id_token"],
                          "subject_types_supported": ["public"],
                          "id_token_signing_alg_values_supported": ["RS256"],
                          "scopes_supported": ["openid", "profile", "email"],
                          "token_endpoint_auth_methods_supported": ["client_secret_post", "client_secret_basic"],
                          "claims_supported": ["sub", "iss", "name", "email"]
                      }
                  elif self.path == '/.well-known/jwks.json':
                      response = {
                          "keys": [
                              {
                                  "kty": "RSA",
                                  "kid": "test-key",
                                  "use": "sig",
                                  "alg": "RS256",
                                  "n": "test-modulus",
                                  "e": "AQAB"
                              }
                          ]
                      }
                  elif self.path == '/userinfo':
                      response = {
                          "sub": "test-user-id",
                          "name": "Test User",
                          "email": "test@example.com"
                      }
                  else:
                      self.send_response(404)
                      self.end_headers()
                      return
                  
                  self.wfile.write(json.dumps(response).encode())
          
          server = HTTPServer(('0.0.0.0', 8080), MockOIDCHandler)
          print("Mock OIDC server running on port 8080")
          server.serve_forever() 